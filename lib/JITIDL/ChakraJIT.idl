//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

import "wtypes.idl";

#if defined(_M_IX86) || defined(_M_ARM)
#define CHAKRA_PTR int
#define BV_SHIFT 5
#elif defined(_M_X64) || defined(_M_ARM64)
#define CHAKRA_PTR __int64
#define BV_SHIFT 6
#endif

// TODO: OOP JIT, how do we make this better?
const int VTABLE_COUNT = 47;
const int EQUIVALENT_TYPE_CACHE_SIZE_IDL = 8;

typedef struct TypeHandlerIDL
{
    boolean isObjectHeaderInlinedTypeHandler;
    boolean isLocked;

    unsigned short inlineSlotCapacity;
    unsigned short offsetOfInlineSlots;

    int slotCapacity;
} TypeHandlerIDL;

typedef struct TypeIDL
{
    unsigned char flags;
    boolean isShared;

    int typeId;

    CHAKRA_PTR libAddr;
    CHAKRA_PTR protoAddr;
    CHAKRA_PTR entrypointAddr;
    CHAKRA_PTR propertyCacheAddr;
    CHAKRA_PTR addr;

    TypeHandlerIDL handler;
} TypeIDL;

typedef struct EquivalentTypeSetIDL
{
    boolean sortedAndDuplicatesRemoved;
    unsigned short count;
    [size_is(count)] TypeIDL ** types;
} EquivalentTypeSetIDL;

typedef struct FixedFieldIDL
{
    boolean nextHasSameFixedField;
    boolean isClassCtor;
    unsigned short valueType;
    unsigned int localFuncId;
    TypeIDL * type;
    CHAKRA_PTR fieldValue;
    CHAKRA_PTR funcInfoAddr;
    CHAKRA_PTR environmentAddr;
} FixedFieldIDL;

typedef struct JITTimeConstructorCacheIDL
{
    boolean skipNewScObject;
    boolean ctorHasNoExplicitReturnValue;
    boolean typeIsFinal;
    boolean isUsed;

    short inlineSlotCount;

    int slotCount;

    TypeIDL type;

    CHAKRA_PTR runtimeCacheAddr;
    CHAKRA_PTR runtimeCacheGuardAddr;
    CHAKRA_PTR guardedPropOps;
} JITTimeConstructorCacheIDL;

typedef struct ObjTypeSpecFldIDL
{
    boolean inUse;
    // TODO: OOP JIT we may want to copy some of the data in these pointers
    unsigned short flags;
    unsigned short slotIndex;
    unsigned short fixedFieldCount;
    unsigned short fixedFieldInfoArraySize; // 1 (when fixedFieldCount is 0) or fixedFieldCount
    int propertyId;
    int typeId;
    unsigned int id;
    CHAKRA_PTR protoObjectAddr;
    CHAKRA_PTR propertyGuardValueAddr;
    EquivalentTypeSetIDL * typeSet;
    TypeIDL * initialType;
    JITTimeConstructorCacheIDL * ctorCache;
    [size_is(fixedFieldInfoArraySize)] FixedFieldIDL * fixedFieldInfoArray;
} ObjTypeSpecFldIDL;

typedef struct PinnedTypeRefsIDL
{
    boolean isOOPJIT;// REVIEW: remove this
    unsigned int count;
    [size_is(count)] CHAKRA_PTR typeRefs[*];

} PinnedTypeRefsIDL;

typedef struct BVUnitIDL
{
    unsigned CHAKRA_PTR word;
} BVUnitIDL;

typedef struct BVFixedIDL
{
    unsigned int len;
    [size_is(((len-1) >> BV_SHIFT) + 1)] BVUnitIDL data[*];
} BVFixedIDL;

typedef struct CallSiteIDL
{
    unsigned short bitFields;
    unsigned short returnType;
    unsigned int ldFldInlineCacheId;
    unsigned int sourceId;
    unsigned int functionId;
} CallSiteIDL;

typedef struct ThisIDL
{
    unsigned short valueType;
    byte thisType;
} ThisIDL;

typedef struct FldIDL
{
    unsigned short valueType;
    byte flags;
    byte polymorphicInlineCacheUtilization;
} FldIDL;

typedef struct ArrayCallSiteIDL
{
    byte bits;
    unsigned int functionNumber;
    unsigned short callSiteNumber;
} ArrayCallSiteIDL;

typedef struct LdElemIDL
{
    unsigned short arrayType;
    unsigned short elemType;
    byte bits;
} LdElemIDL;

typedef struct StElemIDL
{
    unsigned short arrayType;
    byte bits;
} StElemIDL;

typedef struct ProfileDataIDL
{
    byte implicitCallFlags;

    ThisIDL thisData;

    BVFixedIDL * loopFlags;

    unsigned short profiledLdElemCount;
    [size_is(profiledLdElemCount)] LdElemIDL * ldElemData;

    unsigned short profiledStElemCount;
    [size_is(profiledStElemCount)] StElemIDL * stElemData;

    unsigned short profiledArrayCallSiteCount;
    [size_is(profiledArrayCallSiteCount)] ArrayCallSiteIDL * arrayCallSiteData;

    // TODO: michhol OOP JIT, share counts with body
    unsigned int inlineCacheCount;
    [size_is(inlineCacheCount)] FldIDL * fldData;

    unsigned short profiledSlotCount;
    [size_is(profiledSlotCount)] unsigned short * slotData;

    unsigned short profiledCallSiteCount;
    [size_is(profiledCallSiteCount)] CallSiteIDL * callSiteData;

    unsigned short profiledReturnTypeCount;
    [size_is(profiledReturnTypeCount)] unsigned short * returnTypeData;

    unsigned short profiledDivOrRemCount;
    [size_is(profiledDivOrRemCount)] unsigned short * divideTypeInfo;

    unsigned short profiledSwitchCount;
    [size_is(profiledSwitchCount)] unsigned short * switchTypeInfo;

    unsigned short profiledInParamsCount;
    [size_is(profiledInParamsCount)] unsigned short * parameterInfo;

    unsigned int loopCount;
    [size_is(loopCount)] byte * loopImplicitCallFlags;

    CHAKRA_PTR arrayCallSiteDataAddr;
    CHAKRA_PTR fldDataAddr;
    __int64 flags;
} ProfileDataIDL;

typedef struct ThreadContextDataIDL
{
    boolean isThreadBound;
    CHAKRA_PTR processHandle;
    CHAKRA_PTR chakraBaseAddress;
    CHAKRA_PTR crtBaseAddress;
    CHAKRA_PTR threadStackLimitAddr;
    CHAKRA_PTR scriptStackLimit;
    CHAKRA_PTR bailOutRegisterSaveSpaceAddr;
    CHAKRA_PTR disableImplicitFlagsAddr;
    CHAKRA_PTR implicitCallFlagsAddr;
    CHAKRA_PTR debuggingFlagsAddr;
    CHAKRA_PTR debugStepTypeAddr;
    CHAKRA_PTR debugFrameAddressAddr;
    CHAKRA_PTR debugScriptIdWhenSetAddr;
    CHAKRA_PTR stringReplaceNameAddr;
    CHAKRA_PTR stringMatchNameAddr;
    CHAKRA_PTR simdTempAreaBaseAddr;
} ThreadContextDataIDL;

typedef struct ScriptContextDataIDL
{
    boolean isRecyclerVerifyEnabled;
    boolean recyclerAllowNativeCodeBumpAllocation;
    boolean isSIMDEnabled;
    unsigned int recyclerVerifyPad;
    CHAKRA_PTR vtableAddresses[VTABLE_COUNT];

    CHAKRA_PTR nullAddr;
    CHAKRA_PTR undefinedAddr;
    CHAKRA_PTR trueAddr;
    CHAKRA_PTR falseAddr;
    CHAKRA_PTR undeclBlockVarAddr;
    CHAKRA_PTR scriptContextAddr;
    CHAKRA_PTR emptyStringAddr;
    CHAKRA_PTR negativeZeroAddr;
    CHAKRA_PTR numberTypeStaticAddr;
    CHAKRA_PTR stringTypeStaticAddr;
    CHAKRA_PTR objectTypeAddr;
    CHAKRA_PTR objectHeaderInlinedTypeAddr;
    CHAKRA_PTR regexTypeAddr;
    CHAKRA_PTR arrayTypeAddr;
    CHAKRA_PTR nativeIntArrayTypeAddr;
    CHAKRA_PTR nativeFloatArrayTypeAddr;
    CHAKRA_PTR arrayConstructorAddr;
    CHAKRA_PTR charStringCacheAddr;
    CHAKRA_PTR libraryAddr;
    CHAKRA_PTR globalObjectAddr;
    CHAKRA_PTR globalObjectThisAddr;
    CHAKRA_PTR sideEffectsAddr;
    CHAKRA_PTR arraySetElementFastPathVtableAddr;
    CHAKRA_PTR intArraySetElementFastPathVtableAddr;
    CHAKRA_PTR floatArraySetElementFastPathVtableAddr;
    CHAKRA_PTR numberAllocatorAddr;
    CHAKRA_PTR recyclerAddr;
    CHAKRA_PTR builtinFunctionsBaseAddr;
} ScriptContextDataIDL;

typedef struct SmallSpanSequenceIDL
{
    int baseValue;
    unsigned int statementLength;
    [size_is(statementLength)] unsigned int * statementBuffer;
    unsigned int actualOffsetLength; // REVIEW: are lengths the same?
    [size_is(actualOffsetLength)] unsigned int * actualOffsetList;
} SmallSpanSequenceIDL;

typedef struct JITLoopHeaderIDL
{
    boolean isNested;
    boolean isInTry;
    unsigned int interpretCount;
    unsigned int startOffset;
    unsigned int endOffset;
} JITLoopHeaderIDL;

typedef struct AsmJsDataIDL
{
    boolean isHeapBufferConst;
    boolean usesHeapBuffer;
    unsigned short argByteSize;
    unsigned short argCount;
    [size_is(argCount)] byte * argTypeArray;
    int retType;
    int intConstCount;
    int doubleConstCount;
    int floatConstCount;
    int simdConstCount;
    int intTmpCount;
    int doubleTmpCount;
    int floatTmpCount;
    int simdTmpCount;
    int intVarCount;
    int doubleVarCount;
    int floatVarCount;
    int simdVarCount;
    int intByteOffset;
    int doubleByteOffset;
    int floatByteOffset;
    int simdByteOffset;
    int totalSizeInBytes;
} AsmJsDataIDL;

typedef struct PropertyRecordIDL
{
    CHAKRA_PTR vTable;
    int pid;
    unsigned int hash;
    boolean isNumeric;
    boolean isBound;
    boolean isSymbol;
    unsigned int byteCount;
    [size_is(byteCount + sizeof(wchar_t) + (isNumeric ? sizeof(unsigned int) : 0))] byte buffer[*];
} PropertyRecordIDL;

typedef struct FunctionJITRuntimeIDL
{
    unsigned int clonedCacheCount;
    [size_is(clonedCacheCount)] CHAKRA_PTR * clonedInlineCaches;
} FunctionJITRuntimeIDL;

typedef struct PropertyIdArrayIDL
{
    unsigned int count;
    byte extraSlotCount;
    boolean hadDuplicates;
    boolean has__proto__;
    boolean hasNonSimpleParams;
    [size_is(count + extraSlotCount)] int elements[*];
} PropertyIdArrayIDL;


typedef struct JavascriptStringIDL
{
    [size_is(m_charLength + 1)]wchar_t* m_pszValue;
    unsigned int m_charLength;
} JavascriptStringIDL;

typedef [switch_type(int)] union RecyclableObjectContent
{
    // todo: add more interesting types
    [case(4)] //TypeIds_Number
        double value;
    [case(7)] //TypeIds_String
        JavascriptStringIDL str;
    [default]
    ;
} RecyclableObjectContent;


typedef struct RecyclableObjectIDL
{
    CHAKRA_PTR vtbl; // todo: this can be saved
    int* typeId; // first field of Js::Type is typeId, so this should work
    [switch_is(*typeId)] RecyclableObjectContent x;
} RecyclableObjectIDL;

// to avoid rpc considering FunctionBodyDataIDL complex, move this to its own struct
typedef struct ConstTableContentIDL
{
    unsigned int count;
    [size_is(count)] RecyclableObjectIDL** content;
} ConstTableContentIDL;

// FunctionBody fields, read only in JIT, gathered in foreground
typedef struct FunctionBodyDataIDL
{
    byte flags;

    // TODO: compress booleans into flags
    boolean doBackendArgumentsOptimization;
    boolean isLibraryCode;
    boolean isAsmJsMode;
    boolean hasImplicitArgIns;
    boolean isStrictMode;
    boolean isEval;
    boolean hasScopeObject;
    boolean hasCachedScopePropIds;
    boolean inlineCachesOnFunctionObject;
    boolean doInterruptProbe;
    boolean isGlobalFunc;
    boolean isInlineApplyDisabled;
    boolean doJITLoopBody;
    boolean disableInlineSpread;
    boolean hasNestedLoop;
    boolean hasNonBuiltInCallee;
    boolean isParamAndBodyScopeMerged;
    boolean hasFinally;
    boolean usesArgumentsObject;

    unsigned short envDepth;
    unsigned short inParamCount;
    unsigned short profiledIterations;
    unsigned short argUsedForBranch;
    unsigned short profiledCallSiteCount;

    unsigned int funcNumber;
    unsigned int sourceContextId;
    unsigned int nestedCount;
    unsigned int scopeSlotArraySize;
    unsigned int paramScopeSlotArraySize;
    unsigned int attributes;
    unsigned int byteCodeCount;
    unsigned int byteCodeInLoopCount;
    unsigned int nonLoadByteCodeCount;
    unsigned int localFrameDisplayReg;
    unsigned int paramClosureReg;
    unsigned int localClosureReg;
    unsigned int envReg;
    unsigned int firstTmpReg;
    unsigned int firstInnerScopeReg;
    unsigned int varCount;
    unsigned int innerScopeCount;
    unsigned int thisRegisterForEventHandler;
    unsigned int funcExprScopeRegister;
    unsigned int loopCount;
    unsigned int recursiveCallSiteCount;
    unsigned int isInstInlineCacheCount; // TODO: only used in Assert

    SmallSpanSequenceIDL statementMap;

    unsigned int byteCodeLength;
    [size_is(byteCodeLength)] byte * byteCodeBuffer;

    unsigned int constCount;
    [size_is(constCount)] CHAKRA_PTR * constTable;
    ConstTableContentIDL * constTableContent;

    unsigned int inlineCacheCount;
    [size_is(inlineCacheCount)] int * cacheIdToPropertyIdMap;
    [size_is(inlineCacheCount + isInstInlineCacheCount)] CHAKRA_PTR * inlineCaches;

    unsigned int loopHeaderArrayLength;
    [size_is(loopHeaderArrayLength)] JITLoopHeaderIDL * loopHeaders;

    unsigned int referencedPropertyIdCount;
    [size_is(referencedPropertyIdCount)] int * referencedPropertyIdMap;

    unsigned int nameLength;
    [size_is(nameLength)] wchar_t * displayName;

    unsigned int literalRegexCount;
    [size_is(literalRegexCount)] CHAKRA_PTR * literalRegexes;

    unsigned int auxDataCount;
    [size_is(auxDataCount)] byte * auxData;

    unsigned int auxContextDataCount;
    [size_is(auxContextDataCount)] byte * auxContextData;

    ProfileDataIDL * profileData;

    AsmJsDataIDL * asmJsData;

    PropertyIdArrayIDL * formalsPropIdArray;

    CHAKRA_PTR loopHeaderArrayAddr;
    CHAKRA_PTR functionBodyAddr;
    CHAKRA_PTR scriptIdAddr;
    CHAKRA_PTR probeCountAddr;
    CHAKRA_PTR flagsAddr;
    CHAKRA_PTR regAllocStoreCountAddr;
    CHAKRA_PTR regAllocLoadCountAddr;
    CHAKRA_PTR callCountStatsAddr;
    CHAKRA_PTR nestedFuncArrayAddr;
    CHAKRA_PTR auxDataBufferAddr;
    CHAKRA_PTR objectLiteralTypesAddr;
    CHAKRA_PTR formalsPropIdArrayAddr;
} FunctionBodyDataIDL;

// EntryPointInfo fields, read/write in JIT
typedef struct EntryPointInfoOutputIDL
{
    boolean hasJittedStackClosure;
    int localVarSlotsOffset; // FunctionEntryPointInfo only
    int localVarChangedOffset; // FunctionEntryPointInfo only
    unsigned int frameHeight;
} EntryPointInfoOutputIDL;

// FunctionBody fields, written to from JIT
typedef struct FunctionBodyOutputIDL
{
    boolean hasBailoutInstr;
    unsigned short argUsedForBranch;
} FunctionBodyOutputIDL;

typedef struct FunctionJITTimeDataIDL
{
    boolean isAggressiveInliningEnabled;
    boolean isInlined;
    unsigned int localFuncId;
    FunctionBodyDataIDL * bodyData; // TODO: oop jit, can these repeat, should we share?

    BVFixedIDL * inlineesBv;

    unsigned int sharedPropGuardCount;
    [size_is(sharedPropGuardCount)] int * sharedPropertyGuards;

    unsigned int globalObjTypeSpecFldInfoCount;
    [size_is(globalObjTypeSpecFldInfoCount)] ObjTypeSpecFldIDL * globalObjTypeSpecFldInfoArray;

    unsigned int inlineeCount;
    [size_is(inlineeCount)] struct FunctionJITTimeDataIDL * inlinees;
    [size_is(inlineeCount)] boolean * inlineesRecursionFlags;
    unsigned int ldFldInlineeCount;
    [size_is(ldFldInlineeCount)] struct FunctionJITTimeDataIDL * ldFldInlinees;

    unsigned int objTypeSpecFldInfoCount;
    [size_is(objTypeSpecFldInfoCount)] ObjTypeSpecFldIDL * objTypeSpecFldInfoArray;

    FunctionJITRuntimeIDL * profiledRuntimeData;

    struct FunctionJITTimeDataIDL * next;

    CHAKRA_PTR functionInfoAddr;
    CHAKRA_PTR callsCountAddress;
    CHAKRA_PTR weakFuncRef;
} FunctionJITTimeDataIDL;

typedef struct XProcNumberPageSegment
{
    struct XProcNumberPageSegment* nextSegment;

    unsigned int committedEnd;
    unsigned int blockIntegratedSize;
    CHAKRA_PTR pageAddress;
    CHAKRA_PTR allocStartAddress;
    CHAKRA_PTR allocEndAddress;
    CHAKRA_PTR pageSegment;
    CHAKRA_PTR chunkAllocator;
} XProcNumberPageSegment;

typedef struct PolymorphicInlineCacheIDL
{
    unsigned short size;
    CHAKRA_PTR addr;
    CHAKRA_PTR inlineCachesAddr;
} PolymorphicInlineCacheIDL;

typedef struct PolymorphicInlineCacheInfoIDL
{
    unsigned int polymorphicInlineCacheCount;
    [size_is(polymorphicInlineCacheCount)] byte * polymorphicCacheUtilizationArray;
    [size_is(polymorphicInlineCacheCount)] PolymorphicInlineCacheIDL * polymorphicInlineCaches;

    CHAKRA_PTR functionBodyAddr;
} PolymorphicInlineCacheInfoIDL;

// CodeGenWorkItem fields, read only in JIT
typedef struct CodeGenWorkItemIDL
{
    boolean hasSharedPropGuards;
    boolean isJitInDebugMode;  // Whether JIT is in debug mode for this work item.
    byte type;
    char jitMode;

    unsigned int loopNumber;
    XProcNumberPageSegment * xProcNumberPageSegment;

    PolymorphicInlineCacheInfoIDL * selfInfo;

    unsigned int inlineeInfoCount;
    [size_is(inlineeInfoCount)] PolymorphicInlineCacheInfoIDL * inlineeInfo;

    // TODO: OOP JIT, move loop body data to separate struct
    unsigned int symIdToValueTypeMapCount;
    [size_is(symIdToValueTypeMapCount)] unsigned short * symIdToValueTypeMap;

    FunctionJITTimeDataIDL * jitData;
    CHAKRA_PTR jittedLoopIterationsSinceLastBailoutAddr;
    CHAKRA_PTR functionBodyAddr;
    CHAKRA_PTR nativeDataAddr;
} CodeGenWorkItemIDL;

typedef struct NativeDataFixupEntry
{
    struct NativeDataFixupEntry* next;
    unsigned int addrOffset;
    unsigned int targetTotalOffset;
} NativeDataFixupEntry;

typedef struct NativeDataFixupRecord
{
    unsigned int index;
    unsigned int length;
    unsigned int startOffset;
    struct NativeDataFixupEntry* updateList;
} NativeDataFixupRecord;

typedef struct NativeDataFixupTable
{
    unsigned int count;
    [size_is(count)] NativeDataFixupRecord fixupRecords[*];
} NativeDataFixupTable;


typedef struct TypeEquivalenceRecordIDL
{
    unsigned int propertyCount;
    unsigned int propertyOffset;
} TypeEquivalenceRecord;

typedef struct EquivlentTypeCacheIDL
{
    CHAKRA_PTR types[EQUIVALENT_TYPE_CACHE_SIZE_IDL];
    CHAKRA_PTR guardOffset;
    struct TypeEquivalenceRecordIDL record;
    unsigned int nextEvictionVictim;
    boolean isLoadedFromProto;
    boolean hasFixedValue;
} EquivlentTypeCacheIDL;

typedef struct EquivalentTypeGuardIDL
{
    EquivlentTypeCacheIDL cache;
    unsigned int offset;

} EquivalentTypeGuardIDL;

typedef struct EquivalentTypeGuardOffsets
{
    unsigned int count;
    [size_is(count)] EquivalentTypeGuardIDL guards[*];

} EquivalentTypeGuardOffsets;

typedef struct TypeGuardTransferEntryIDL
{
    unsigned int propId;
    unsigned int guardsCount;
    struct TypeGuardTransferEntryIDL* next;
    [size_is(guardsCount)] int guardOffsets[*];
} TypeGuardTransferEntryIDL;

typedef struct TypeGuardTransferData
{
    unsigned int propertyGuardCount;
    TypeGuardTransferEntryIDL* entries;
} TypeGuardTransferData;

typedef struct  CtorCacheTransferEntryIDL
{
    unsigned int propId;
    unsigned int cacheCount;
    [size_is(cacheCount)] CHAKRA_PTR caches[*];
}  CtorCacheTransferEntryIDL;

typedef struct CtorCacheTransferData
{
    unsigned int ctorCachesCount;
    [size_is(ctorCachesCount)] CtorCacheTransferEntryIDL ** entries;
} CtorCacheTransferData;


typedef struct NativeDataBuffer
{
    unsigned int len;
    unsigned int unused;
    [size_is(len)] byte data[*];
} NativeDataBuffer;

// Fields that JIT modifies
typedef struct JITOutputIDL
{
    boolean disableAggressiveIntTypeSpec;
    boolean disableInlineApply;
    boolean disableInlineSpread;
    boolean disableStackArgOpt;
    boolean disableSwitchOpt;
    boolean disableTrackCompoundedIntOverflow;
    boolean isInPrereservedRegion;

    unsigned short pdataCount;
    unsigned short xdataSize;

    EntryPointInfoOutputIDL writeableEPData;
    FunctionBodyOutputIDL writeableBodyData;

    TypeGuardTransferData typeGuardTransferData;
    CtorCacheTransferData ctorCacheTransferData;
    PinnedTypeRefsIDL* pinnedTypeRefs;

    unsigned int codeSize;
    unsigned int throwMapOffset;
    unsigned int throwMapCount;
    unsigned int inlineeFrameOffsetArrayOffset;
    unsigned int inlineeFrameOffsetArrayCount;

    NativeDataFixupTable* nativeDataFixupTable;
    NativeDataBuffer* buffer;
    EquivalentTypeGuardOffsets* equivalentTypeGuardOffsets;
    XProcNumberPageSegment* numberPageSegments;

    __int64 codeAddress;
    __int64 xdataAddr;
} JITOutputIDL;

[
    uuid(ead694ed-2243-44cb-a9dc-85d3ba934dab),
    pointer_default(unique)
]
interface IChakraJIT
{
    HRESULT Shutdown([in] handle_t binding);

    HRESULT InitializeThreadContext(
        [in] handle_t binding,
        [in] ThreadContextDataIDL * threadData,
        [out] CHAKRA_PTR * threadContextInfoAddress,
        [out] CHAKRA_PTR * prereservedRegionAddr);

    HRESULT CleanupProcess(
        [in] handle_t binding,
        [in] CHAKRA_PTR processHandle);

    HRESULT CleanupThreadContext(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress);

    HRESULT AddPropertyRecord(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress,
        [in] PropertyRecordIDL * propertyRecord);

    HRESULT AddDOMFastPathHelper(
        [in] handle_t binding,
        [in] CHAKRA_PTR scriptContextInfoAddress,
        [in] CHAKRA_PTR funcInfoAddr,
        [in] int helper);

    HRESULT AddModuleRecordInfo(
        [in] handle_t binding,
        [in] CHAKRA_PTR scriptContextInfoAddress,
        [in] unsigned int moduleId,
        [in] CHAKRA_PTR localExportSlotsAddr);

    HRESULT SetWellKnownHostTypeId(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress,
        [in] int typeId);

    HRESULT InitializeScriptContext(
        [in] handle_t binding,
        [in] ScriptContextDataIDL * scriptContextData,
        [out] CHAKRA_PTR * scriptContextInfoAddress);

    HRESULT CleanupScriptContext(
        [in] handle_t binding,
        [in] CHAKRA_PTR scriptContextInfoAddress);

    HRESULT FreeAllocation(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress,
        [in] CHAKRA_PTR address);

    HRESULT IsNativeAddr(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress,
        [in] CHAKRA_PTR address,
        [out] boolean * result);

    HRESULT RemoteCodeGen(
        [in] handle_t binding,
        [in] CHAKRA_PTR threadContextInfoAddress,
        [in] CHAKRA_PTR scriptContextInfoAddress,
        [in] CodeGenWorkItemIDL * workItemData,
        [out] JITOutputIDL * jitData);

}
